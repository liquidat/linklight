---
###############################################################################
# NOTE: YOU MUST UPDATE THIS EVERY TIME WE UPDATE THE QRADAR AMI
#
# This is a limitation of the QRadar installation setup, it is not made to
# handle ephemeral ip addresses on instance spin up so we have to do post
# deploy fixes
#
###############################################################################
- name: QRadar Post Instance Deployment Configuration
  hosts: qradar
  become: true
  vars:
    qradar_old_ami_ip: "172.16.233.181"
    qradar_config_files_with_ip_addrs:
      - "/etc/consul/consul.json"
      - "/etc/consul/zk-consul.json"
      - "/etc/consul/qregistry.json"
      - "/etc/hosts"
      - "/etc/hosts.bak"
      - "/etc/hosts.default"
      - "/etc/httpd/conf/httpd.conf"
      - "/etc/si/install_config/ip"
      - "/etc/sysconfig/marathon"
      - "/etc/sysconfig/network"
      - "/etc/sysconfig/iptables"
      - "/etc/sysconfig/mesos-master"
      - "/etc/sysconfig/mesos-agent"
      - "/etc/syslog-ng/syslog-ng.conf"
      - "/etc/systemd/system/docker.service.d/10-options.conf"
      - "/etc/zookeeper/conf/zoo.cfg"
      - "/opt/qradar/conf/nva.conf"
      - "/opt/qradar/conf/nva.hostcontext.conf"
      - "/opt/qradar/conf/iptables.d/nat.post/0_docker_nat"
      - "/opt/qradar/conf/iptables.d/nat.post/0_docker_infra_nat"
      - "/opt/qradar/conf/iptables.d/nat.post/0_docker_apps_nat"
      - "/opt/qradar/conf/iptables.d/nat.post/0_docker_apps_proxy_nat"
      - "/opt/qradar/conf/nva.conf.bak"
      - "/opt/qradar/conf/frameworks.properties"
      - "/opt/qradar/conf/capabilities/hostcapabilities.xml"
      - "/opt/qradar/conf/.ipaddress"
      - "/opt/qradar/conf/distrib_config.xml"
      - "/opt/qradar/conf/frameworks.properties.bak"
      - "/opt/qradar/conf/oauth_server.cache"
      - "/opt/qradar/conf/dtlspki/certs/10.pem"
      - "/opt/qradar/conf/dtlspki/{{qradar_old_ami_ip}}/server/server_ssl.cnf"
      - "/opt/qradar/conf/dtlspki/index.txt"
      - "/opt/qradar/conf/install_dump.txt.bak"
      - "/opt/qradar/conf/install_instructions.txt.bak"
      - "/opt/qradar/conf/configmetadata.xml"
      - "/opt/qradar/conf/deployment.xml"
      - "/opt/qradar/conf/ifmapConfig.xml"
      - "/opt/qradar/conf/EP.xml"
      - "/opt/qradar/conf/nva.masterdaemon.masterdaemon.conf"
      - "/opt/qradar/conf/nva.qflow.qflow0.conf"
      - "/opt/qradar/conf/syslog-ng.conf"
      - "/opt/qradar/conf/collectorlist.conf"
      - "/opt/qradar/dca/dca/init/dca_license/dca_license_settings_user.txt"
      - "/opt/qradar/dca/dca/init/dca_update/dca_update_settings_user.txt"
      - "/store/tmp/distrib_config.xml"
      - "/root/AUTO_INSTALL_INSTRUCTIONS-last"

    qradar_netconf_status_file: "/opt/qradar/workshop_provision_ip_configured"
  tasks:
    - name: Check if status file exists
      stat:
        path: "{{ qradar_netconf_status_file }}"
      register: st

    - name: Configure IP address if necessary
      block:
        - name: stop hostcontext
          service:
            name: hostcontext
            state: stopped
        - name: stop tomcat
          service:
            name: tomcat
            state: stopped
        - name: stop hostservices
          service:
            name: hostservices
            state: stopped
        - name: Remove reported_hostcapabilities.xml
          file:
            path: "/opt/qradar/conf/capabilities/reported_hostcapabilties.xml"
            state: absent
        - name: Replace all mentions of Instance IP used to create custom AMI
          replace:
            path: '{{ item }}'
            regexp: '{{ qradar_old_ami_ip | regex_replace( "\.", "\.") }}'
            replace: '{{ private_ip }}'
          loop: "{{ qradar_config_files_with_ip_addrs }}"
          register: dot_notation
        - name: Replace all mentions of Instance IP in dash notation used to create custom AMI
          replace:
            path: '{{ item }}'
            regexp: '{{ qradar_old_ami_ip | regex_replace( "\.", "-" ) }}'
            replace: '{{ private_ip | regex_replace( "\.", "-" ) }}'
          loop: "{{ qradar_config_files_with_ip_addrs }}"
          register: dash_notation

        - name: create new dtlskpi ssl conf dir
          file:
            path: "/opt/qradar/conf/dtlspki/{{private_ip}}/"
            state: directory

        - name: copy old dtlspki ssl conf dir
          copy:
            src: "/opt/qradar/conf/dtlspki/{{ qradar_old_ami_ip }}/"
            dest: "/opt/qradar/conf/dtlspki/{{private_ip}}/"
            remote_src: yes

        - name: restart iptables
          service:
            name: iptables
            state: restarted
        - name: restart httpd
          service:
            name: httpd
            state: restarted
        - name: restart imq
          service:
            name: imq
            state: restarted
        - name: run fixes
          shell: "{{ item }}"
          loop:
            - /opt/qradar/bin/fix_deployment_templates.py
            - /opt/qradar/bin/fix_extra_version.sh
            - /opt/qradar/bin/fix_serial.sh
          environment:
            NVA_CONF: /opt/qradar/conf/nva.conf
        - name: start hostservices
          service:
            name: hostservices
            state: started
        - name: start tomcat
          service:
            name: tomcat
            state: started
        - name: start hostcontext
          service:
            name: hostcontext
            state: started
        - name: restart consul
          service:
            name: consul
            state: restarted
        # discovered from /opt/qradar/bin/qradar_netsetup.py
        - name: run qradar app upgrades
          shell: /opt/qradar/bin/upgrade_applications.py
        - name: Create status file
          file:
            path: "{{ qradar_netconf_status_file }}"
            state: touch
      when:
        - not st.stat.exists


